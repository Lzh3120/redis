每增加一个数字，将前面已经添加的子集中增加该数字即可
```java
    public static List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        result.add(new ArrayList<>());
        for(int num : nums){
            int size = result.size();
            for (int i = 0;i<size;i++){
                ArrayList<Integer> temp = new ArrayList<>(result.get(i));
                temp.add(num);
                result.add(temp);
            }
        }
        return result;
    }
```

回溯算法
```java

```


去重子集问题

90. 子集 II

```java
   public static List<List<Integer>> subsetsWithDup(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> result = new ArrayList<>();

        result.add(new ArrayList<>());
        //记录上一个数字时，已生成的答案数量
        int len = 0;
        for(int j = 0;j<nums.length;j++){
            int size = result.size();
            int num = nums[j];
            int start = 0;
            if(j != 0 && nums[j] == nums[j-1]){
                start = size - len;
            }
            len = size - start;
            for(int i = start; i<size; i++){
                List<Integer> temp = new ArrayList<>(result.get(i));
                temp.add(num);
                result.add(temp);
            }
        }
        return result;
    }
}

```